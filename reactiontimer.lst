


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000                 THUMB                        ; Switch to Thumb i
                                                            nstruction set for 
                                                            more efficient code
                                                            
    4 00000000                 AREA             My_code, CODE, READONLY ; Defin
                                                            e a new area for th
                                                            e code
    5 00000000                 EXPORT           __MAIN      ; Make __MAIN funct
                                                            ion visible outside
                                                             this file
    6 00000000                 ENTRY                        ; Mark the entry po
                                                            int for the code ex
                                                            ecution
    7 00000000         
    8 00000000         __MAIN                               ; Start of the main
                                                             function
    9 00000000         
   10 00000000         ; Initialize and turn off all LEDs using a defined base 
                       address for ease of access
   11 00000000 F8DF A148       LDR              R10, =LED_BASE_ADR ; Load base 
                                                            address of LED memo
                                                            ry into R10
   12 00000004 F04F 4630       MOV              R6, #0xB0000000 ; Set up value 
                                                            to turn off LEDs on
                                                             port 1
   13 00000008 F8CA 6020       STR              R6, [R10, #0x20] ; Write the va
                                                            lue to turn off LED
                                                            s on port 1
   14 0000000C F04F 067C       MOV              R6, #0x0000007C ; Set up value 
                                                            to turn off LEDs on
                                                             port 2
   15 00000010 F8CA 6040       STR              R6, [R10, #0x40] ; Write the va
                                                            lue to turn off LED
                                                            s on port 2
   16 00000014         
   17 00000014         ; Setting up registers for a counter loop
   18 00000014 F04F 0400       MOV              R4, #0
   19 00000018 F04F 0000       MOV              R0, #0
   20 0000001C F04F 0100       MOV              R1, #0x0    ; Initialize simple
                                                             counter
   21 00000020 F04F 02FF       MOV              R2 , #0xFF  ; Set a limit for t
                                                            he counter
   22 00000024         
   23 00000024         
   24 00000024         ; Initialize random number generator seed
   25 00000024 F64D 4BBA 
                       loop    MOV              R11, #0xDCBA ; Initialize R11 w
                                                            ith a non-zero seed
                                                             value for random n
                                                            umber generation
   26 00000028         ;map 1 to 65353 (2^16-1)
   27 00000028         ;random value in r1111
   28 00000028         ;to 20000 to 100, 000
   29 00000028         ;20,000*0.1ms= 2s and 100,000*0.1ms=10s
   30 00000028 F000 F869       BL               RandomNum   ; Generate a random
                                                             number
   31 0000002C F000 F840       BL               TURN_OFF    ; Call subroutine t



ARM Macro Assembler    Page 2 


                                                            o turn off LEDs
   32 00000030         
   33 00000030         ; Masking and scaling random number to create a delay
   34 00000030 F64F 71FF       MOV              R1, #0xFFFF ; Extracting the le
                                                            ast sig 16 bits of 
                                                            R11--- Mask out the
                                                             most significant 1
                                                            6 bits 000000000001
                                                            11111111111
   35 00000034 EA0B 0B01       AND              R11, R1
   36 00000038 F04F 017A       MOV              R1, #122    ; Scale the number 
                                                            between 0 and 8,000
                                                            ,000 (7994270)
   37 0000003C FB0B FB01       MUL              R11, R1     ; Multiplying it by
                                                             122
   38 00000040 F04F 0164       MOV              R1, #100
   39 00000044 FBBB FBF1       UDIV             R11, R1     ;Divide by 100 (to 
                                                            make sure that the 
                                                            range is between 0 
                                                            and 79942.7)
   40 00000048 F644 6120       MOV              R1, #20000  ; Shift the range t
                                                            o 20,000 - 100,000
   41 0000004C 448B            ADD              R11, R1     ; Add 20000 to it t
                                                            o ensure 20000 if r
                                                            andom number happen
                                                            s to be 0
   42 0000004E         ; our range is now 20,000 - 99,942.7
   43 0000004E         ; +- 5% of 2 seconds is 1.9s - 2.1 s 
   44 0000004E         ; +- 5% of 10s is 9.5s to 10.5s 
   45 0000004E         ; our range is between 2s and 9.994s
   46 0000004E         ; and hence, we are between the range. 
   47 0000004E         ; QED
   48 0000004E         ; Therefore hence, hence therefore. 
   49 0000004E         
   50 0000004E 4658    smallDelay
                               MOV              R0, R11     ; Use the random nu
                                                            mber for delay
   51 00000050 F000 F871       BL               DELAY
   52 00000054 F000 F822       BL               TURN_ON     ; Call subroutine t
                                                            o turn on LEDs
   53 00000058 F04F 0100       MOV              R1, #0
   54 0000005C F04F 0001       MOV              R0, #1
   55 00000060         
   56 00000060         ; Polling loop to wait for a button press
   57 00000060 F000 F869 
                       poll    BL               DELAY
   58 00000064 F101 0101       ADD              R1, #1
   59 00000068 F8DA 9055       LDR              R9, [R10, #0x55] ; Read the inp
                                                            ut register to chec
                                                            k for button press 
                                                            55+address of leds=
                                                             data register, and
                                                             r10 is address of 
                                                            led
   60 0000006C         ;r9 address of data reg
   61 0000006C F019 0F04       TST              R9, #(1<<2) ; Test if the butto
                                                            n is pressed
   62 00000070         ;r9 anded with 4, checking if 3rd bit- bit for button be
                       ing pressed- is pressed 



ARM Macro Assembler    Page 3 


   63 00000070 D1F6            BNE              poll        ; Keep polling if b
                                                            utton not pressed
   64 00000072         
   65 00000072         ; Displaying a number on LEDs in a loop
   66 00000072 F04F 0704 
                       displayLoop
                               MOV              R7, #4      ; Set byte counter 
                                                            for display
   67 00000076 B402            push             {R1}        ; Push R1 to stack 
                                                            to preserve its val
                                                            ue
   68 00000078         
   69 00000078         ; r1 is a 32 bit number, number is amount of 0.1 ms. 
   70 00000078         ;if it took me 1ms, r1 will have 10. r1/10 = number of m
                       s. 
   71 00000078         
   72 00000078 F000 F826 
                       display BL               DISPLAY_NUM ; Call subroutine t
                                                            o display the numbe
                                                            r
   73 0000007C F644 6020       MOV              R0, #0x4E20 ; Load delay value
   74 00000080 F000 F859       BL               DELAY       ; Delay between dis
                                                            plays
   75 00000084 EA4F 2111       LSR              R1, #8      ; Shift out the dis
                                                            played byte
   76 00000088 3F01            SUBS             R7, #1      ; Decrement byte co
                                                            unter
   77 0000008A D1F5            BNE              display     ; Loop until all by
                                                            tes displayed
   78 0000008C F000 F810       BL               TURN_OFF    ; Turn off LEDs aft
                                                            er displaying
   79 00000090 F24C 3050       MOV              R0, #0xC350 ; Load delay value
   80 00000094 F000 F84F       BL               DELAY       ; Delay after displ
                                                            ay
   81 00000098 BC02            pop              {R1}        ; Pop R1 from stack
                                                             to restore its val
                                                            ue
   82 0000009A E7EA            B                displayLoop ; Loop to display n
                                                            umbers continuously
                                                            
   83 0000009C         
   84 0000009C         ;COUNTER CODE 
   85 0000009C         ;imagine R1 has 11011 - 010
   86 0000009C         ;    87654321
   87 0000009C         
   88 0000009C         ;mask with 0x3 gives 10 that's why this is left shifted 
                       by 29
   89 0000009C         ;mask with 0x4 gives 0 left 
   90 0000009C         ;mask with (11111000)2 gives 11011
   91 0000009C         ;11011 because port 2 LEDS are from bit 2 to bit 6
   92 0000009C         
   93 0000009C         ;bc LEDs are active low, whatever you store needs to be 
                       complimented
   94 0000009C         ; Display the number in R6 onto the 8 LEDs
   95 0000009C         
   96 0000009C         ; Turn on LED by setting a particular memory-mapped regi
                       ster
   97 0000009C         TURN_ON
   98 0000009C B418            push             {r3-r4}     ; Save the current 



ARM Macro Assembler    Page 4 


                                                            values of R6 and R4
                                                             on the stack
   99 0000009E F44F 4440       MOV              R4, #0xC000 ; Load the lower 16
                                                             bits of the addres
                                                            s into R4
  100 000000A2 F2C2 0409       MOVT             R4,#0x2009  ; Load the upper 16
                                                             bits of the addres
                                                            s into R4 (forming 
                                                            0x2009C000)
  101 000000A6 F04F 4610       MOV              R6, #0x90000000 ; Move the spec
                                                            ific data value to 
                                                            R6 to turn on LED
  102 000000AA 6226            STR              R6, [R4, #0x20] ; Store the val
                                                            ue in R6 to the mem
                                                            ory address compute
                                                            d by (R4 + 0x20)
  103 000000AC         
  104 000000AC BC18            pop              {r3-r4}     ; Restore the value
                                                            s of R6 and R4 from
                                                             the stack
  105 000000AE         
  106 000000AE         ; Insert user code here
  107 000000AE         
  108 000000AE 4770            BX               LR          ; Return from the s
                                                            ubroutine by branch
                                                            ing to the address 
                                                            in the Link Registe
                                                            r
  109 000000B0         
  110 000000B0         ; Turn off LED by setting a particular memory-mapped reg
                       ister
  111 000000B0         TURN_OFF
  112 000000B0 B540            STMFD            R13!, {R6, R14} ; Push the valu
                                                            es of R6 and LR (Li
                                                            nk Register, R14) o
                                                            nto the stack
  113 000000B2 F44F 4440       MOV              R4, #0xC000 ; Load the lower 16
                                                             bits of the addres
                                                            s into R4
  114 000000B6 F2C2 0409       MOVT             R4,#0x2009  ; Load the upper 16
                                                             bits of the addres
                                                            s into R4 (forming 
                                                            0x2009C000)
  115 000000BA F04F 4630       MOV              R6, #0xB0000000 ; Move the spec
                                                            ific data value to 
                                                            R6 to turn off LED
  116 000000BE 6226            STR              R6, [R4, #0x20] ; Store the val
                                                            ue in R6 to the mem
                                                            ory address compute
                                                            d by (R4 + 0)
  117 000000C0 F04F 067C       MOV              R6, #0x0000007C
  118 000000C4 6426            STR              R6, [R4, #0x40]
  119 000000C6 BD40            LDMFD            R13!, {R6, R15} ; Pop the value
                                                            s off the stack
  120 000000C8         
  121 000000C8 B506    DISPLAY_NUM
                               STMFD            R13!,{R1, R2, R14}
  122 000000CA         
  123 000000CA FA91 F1A1       RBIT             R1, R1      ; Reverse the bit o



ARM Macro Assembler    Page 5 


                                                            rder of R1
  124 000000CE BA09            REV              R1, R1      ; Reverse the byte 
                                                            order of R1 (after 
                                                            bit reversal)
  125 000000D0 F001 0503       AND              R5 ,R1, #0x03 ; R5 = R1 ANDed w
                                                            ith 0x03, isolating
                                                             the last 2 bits of
                                                             R1
  126 000000D4 EA4F 7505       LSL              R5, #28     ; Left Shift R5 by 
                                                            28 bits, moving the
                                                             bits to the top of
                                                             the register
  127 000000D8 F001 0604       AND              R6, R1 , #0x04 ; R6 = R1 ANDed 
                                                            with 0x04, isolatin
                                                            g the 3rd bit from 
                                                            the LSB of R1
  128 000000DC EA4F 7646       LSL              R6, R6 , #29 ; Left Shift R6 by
                                                             29 bits (after iso
                                                            lating the bit), mo
                                                            ving it to bit 31
  129 000000E0 EA45 0806       ORR              R8, R5, R6  ; R8 = R5 ORed with
                                                             R6, combining the 
                                                            bits from R5 and R6
                                                            
  130 000000E4 F088 38FF       EOR              R8, R8, #0xFFFFFFFF ; R8 = R8 X
                                                            ORed with all 1's, 
                                                            flipping all bits o
                                                            f R8
  131 000000E8 F8CA 8020       STR              R8, [R10, #0x20] ; Store R8 int
                                                            o the memory addres
                                                            s contained in R10 
                                                            plus offset 0x20
  132 000000EC         
  133 000000EC         ; Second set of operations on R1
  134 000000EC F001 08F8       AND              R8 ,R1, #0xF8 ; R8 = R1 ANDed w
                                                            ith 0xF8, isolating
                                                             the top 5 bits of 
                                                            R1
  135 000000F0 EA4F 0858       LSR              R8, #1      ; Right Shift R8 by
                                                             1 bit
  136 000000F4 F088 38FF       EOR              R8, R8, #0xFFFFFFFF ; R8 = R8 X
                                                            ORed with all 1's, 
                                                            flipping all bits o
                                                            f R8
  137 000000F8 F8CA 8040       STR              R8, [R10, #0x40] ; Store R8 int
                                                            o the memory addres
                                                            s contained in R10 
                                                            plus offset 0x40
  138 000000FC         
  139 000000FC         ; Usefull commaands:  RBIT (reverse bits), BFC (bit fiel
                       d clear), LSR & LSL to shift bits left and right, ORR & 
                       AND and EOR for bitwise operations
  140 000000FC         
  141 000000FC BD06            LDMFD            R13!,{R1, R2, R15}
  142 000000FE         
  143 000000FE         ;
  144 000000FE         ; R11 holds a 16-bit random number via a pseudo-random s
                       equence as per the Linear feedback shift register (Fibon
                       acci) on WikiPedia



ARM Macro Assembler    Page 6 


  145 000000FE         ; R11 holds a non-zero 16-bit number.  If a zero is fed 
                       in the pseudo-random sequence will stay stuck at 0
  146 000000FE         ; Take as many bits of R11 as you need.  If you take the
                        lowest 4 bits then you get a number between 1 and 15.
  147 000000FE         ;   If you take bits 5..1 you'll get a number between 0 
                       and 15 (assuming you right shift by 1 bit).
  148 000000FE         ;
  149 000000FE         ; R11 MUST be initialized to a non-zero 16-bit value at 
                       the start of the program OR ELSE!
  150 000000FE         ; R11 can be read anywhere in the code but must only be 
                       written to by this subroutine
  151 000000FE B546    RandomNum
                               STMFD            R13!,{R1, R2, R6, R14}
  152 00000100         
  153 00000100 F40B 4100       AND              R1, R11, #0x8000
  154 00000104 F40B 5200       AND              R2, R11, #0x2000
  155 00000108 EA4F 0282       LSL              R2, #2
  156 0000010C EA81 0602       EOR              R6, R1, R2
  157 00000110 F40B 5180       AND              R1, R11, #0x1000
  158 00000114 EA4F 01C1       LSL              R1, #3
  159 00000118 EA86 0601       EOR              R6, R6, R1
  160 0000011C F40B 6180       AND              R1, R11, #0x0400
  161 00000120 EA4F 1141       LSL              R1, #5
  162 00000124 EA86 0601       EOR              R6, R6, R1  ; R6 now contains t
                                                            he new bit to be sh
                                                            ifted into the LSB
  163 00000128 EA4F 36D6       LSR              R6, #15
  164 0000012C EA4F 0B4B       LSL              R11, #1     ; Shift R11 to the 
                                                            left by 1 bit
  165 00000130 EA4B 0B06       ORR              R11, R11, R6 ; Insert the new L
                                                            SB into R11
  166 00000134 BD46            LDMFD            R13!,{R1, R2, R6, R15}
  167 00000136         
  168 00000136         ;
  169 00000136         ;
  170 00000136         ;  Delay 0.1ms (100us) * R0 times
  171 00000136         ;   aim for better than 10% accuracy
  172 00000136         ;               The formula to determine the number of l
                       oop cycles is equal to Clock speed x Delay time / (#cloc
                       k cycles)
  173 00000136         ;               where clock speed = 4MHz and if you use 
                       the BNE or other conditional branch command, the #clock 
                       cycles =
  174 00000136         ;               2 if you take the branch, and 1 if you d
                       on't.
  175 00000136         
  176 00000136         
  177 00000136         
  178 00000136 B504    DELAY   STMFD            R13!,{R2, R14}
  179 00000138         ; making the 1 millisecond delay
  180 00000138 B420            push             {R5}
  181 0000013A F04F 0585       MOV              R5,  #0x85  ; Load R5 with cons
                                                            tant (133), base va
                                                            lue for multiplicat
                                                            ion
  182 0000013E FB05 F500       MUL              R5,R5,R0    ; Multiply R5 by R0
                                                             to scale the delay
                                                            
  183 00000142         



ARM Macro Assembler    Page 7 


  184 00000142         DELAYING
  185 00000142 3D01            SUBS             R5, #0x1    ; Subtract 1 from R
                                                            5 and set condition
                                                             flags
  186 00000144 DCFD            BGT              DELAYING    ; If R5 > 0, branch
                                                             to DELAYING, conti
                                                            nuing the delay
  187 00000146 BC20            pop              {R5}
  188 00000148         ;
  189 00000148         ; code to generate a delay of 0.1mS * R0 times
  190 00000148         ;
  191 00000148 BD04    exitDelay
                               LDMFD            R13!,{R2, R15}
  192 0000014A         
  193 0000014A         
  194 0000014A 2009C000 
                       LED_BASE_ADR
                               EQU              0x2009c000  ; Base address of t
                                                            he memory that cont
                                                            rols the LEDs 
  195 0000014A 4002C00C 
                       PINSEL3 EQU              0x4002c00c  ; Address of Pin Se
                                                            lect Register 3 for
                                                             P1[31:16]
  196 0000014A 4002C010 
                       PINSEL4 EQU              0x4002c010  ; Address of Pin Se
                                                            lect Register 4 for
                                                             P2[15:0]
  197 0000014A 2009C054 
                       FIO2PIN EQU              0x2009c054
  198 0000014A         ; Usefull GPIO Registers
  199 0000014A         ; FIODIR  - register to set individual pins as input or 
                       output
  200 0000014A         ; FIOPIN  - register to read and write pins
  201 0000014A         ; FIOSET  - register to set I/O pins to 1 by writing a 1
                       
  202 0000014A         ; FIOCLR  - register to clr I/O pins to 0 by writing a 1
                       
  203 0000014A         
  204 0000014A 00 00           ALIGN
  205 0000014C         END
  206 0000014C         
  207 0000014C         
  208 0000014C         
  209 0000014C         ; QUESTION 1
  210 0000014C         ;If a 32-bit register is counting user reaction time in 
                       0.1 milliseconds increments, what is the
  211 0000014C         ;maximum amount of time which can be stored in 8 bits, 1
                       6-bits, 24-bits and 32-bits?
  212 0000014C         
  213 0000014C         
  214 0000014C         ;Each bit can represent two values (0 or 1). Therefore, 
                       an n-bit number can represent 2^n unique values.
  215 0000014C         ;If a register is counting in 0.1 millisecond increments
                       , then to find the maximum amount of time it can store, 
                       we would multiply the number of unique values it can rep
                       resent by the increment value.
  216 0000014C         ;8-bit register: Can store 2^8 values, which is 256. Mul
                       tiplied by 0.1 milliseconds gives us 25.6 milliseconds m



ARM Macro Assembler    Page 8 


                       aximum. 
  217 0000014C         ;16-bit register: Can store  2^16 values, which is 65,53
                       6. Multiplied by 0.1 milliseconds gives us 6,553.6 milli
                       seconds, or 6.5536 seconds maximum.
  218 0000014C         ;24-bit register: Can store 2^24 values, which is 16,777
                       ,216. Multiplied by 0.1 milliseconds gives us 1,677,721.
                       6 milliseconds, or 1,677.7216 seconds (approximately 27.
                       96 minutes) maximum.
  219 0000014C         ;32-bit register: Can store 2^32 values, which is 4,294,
                       967,296. Multiplied by 0.1 milliseconds gives us 429,496
                       ,729.6 milliseconds, or 429,496.7296 seconds (approximat
                       ely 119.86 hours or almost 5 days) maximum.
  220 0000014C         
  221 0000014C         
  222 0000014C         ; QUESTION 2
  223 0000014C         ;Considering typical human reaction time, which size wou
                       ld be the best for this task (8, 16,
  224 0000014C         ;24, or 32 bits)?
  225 0000014C         ;Typical human reaction times are usually within the ran
                       ge of 150 to 300 milliseconds, but to accommodate a wide
                       r range including outliers, we might consider up to 1000
                        milliseconds (1 second) as the upper limit for a robust
                        reaction timer.
  226 0000014C         ;Using these principles, let's calculate:
  227 0000014C         
  228 0000014C         ;Given these calculations:
  229 0000014C         ;An 8-bit register is too small, as it can't even cover 
                       the typical lower bound of human reaction time.
  230 0000014C         ;A 16-bit register is quite sufficient to cover typical 
                       human reaction times, with plenty of room to spare for s
                       lower reactions.
  231 0000014C         ;A 24-bit register and a 32-bit register provide more ra
                       nge than necessary for this application.
  232 0000014C         ;Therefore, the 16-bit register would be the best choice
                        for measuring human reaction times, as it provides an a
                       dequate range without being wastefully large.
                       
              2009C000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\reactiontimer.d -o.\objects\reactiontimer.o -I.\RTE\_Tar
get_1 -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.7.1\Device\Include -IC:\Keil_v5\
ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SE
TA 529" --predefine="LPC175x_6x SETA 1" --list=.\listings\reactiontimer.lst Rea
ctionTimer.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DELAY 00000136

Symbol: DELAY
   Definitions
      At line 178 in file ReactionTimer.s
   Uses
      At line 51 in file ReactionTimer.s
      At line 57 in file ReactionTimer.s
      At line 74 in file ReactionTimer.s
      At line 80 in file ReactionTimer.s

DELAYING 00000142

Symbol: DELAYING
   Definitions
      At line 184 in file ReactionTimer.s
   Uses
      At line 186 in file ReactionTimer.s
Comment: DELAYING used once
DISPLAY_NUM 000000C8

Symbol: DISPLAY_NUM
   Definitions
      At line 121 in file ReactionTimer.s
   Uses
      At line 72 in file ReactionTimer.s
Comment: DISPLAY_NUM used once
END 0000014C

Symbol: END
   Definitions
      At line 205 in file ReactionTimer.s
   Uses
      None
Comment: END unused
My_code 00000000

Symbol: My_code
   Definitions
      At line 4 in file ReactionTimer.s
   Uses
      None
Comment: My_code unused
RandomNum 000000FE

Symbol: RandomNum
   Definitions
      At line 151 in file ReactionTimer.s
   Uses
      At line 30 in file ReactionTimer.s
Comment: RandomNum used once
TURN_OFF 000000B0

Symbol: TURN_OFF
   Definitions
      At line 111 in file ReactionTimer.s
   Uses
      At line 31 in file ReactionTimer.s
      At line 78 in file ReactionTimer.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


TURN_ON 0000009C

Symbol: TURN_ON
   Definitions
      At line 97 in file ReactionTimer.s
   Uses
      At line 52 in file ReactionTimer.s
Comment: TURN_ON used once
__MAIN 00000000

Symbol: __MAIN
   Definitions
      At line 8 in file ReactionTimer.s
   Uses
      At line 5 in file ReactionTimer.s
Comment: __MAIN used once
display 00000078

Symbol: display
   Definitions
      At line 72 in file ReactionTimer.s
   Uses
      At line 77 in file ReactionTimer.s
Comment: display used once
displayLoop 00000072

Symbol: displayLoop
   Definitions
      At line 66 in file ReactionTimer.s
   Uses
      At line 82 in file ReactionTimer.s
Comment: displayLoop used once
exitDelay 00000148

Symbol: exitDelay
   Definitions
      At line 191 in file ReactionTimer.s
   Uses
      None
Comment: exitDelay unused
loop 00000024

Symbol: loop
   Definitions
      At line 25 in file ReactionTimer.s
   Uses
      None
Comment: loop unused
poll 00000060

Symbol: poll
   Definitions
      At line 57 in file ReactionTimer.s
   Uses
      At line 63 in file ReactionTimer.s
Comment: poll used once
smallDelay 0000004E




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: smallDelay
   Definitions
      At line 50 in file ReactionTimer.s
   Uses
      None
Comment: smallDelay unused
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FIO2PIN 2009C054

Symbol: FIO2PIN
   Definitions
      At line 197 in file ReactionTimer.s
   Uses
      None
Comment: FIO2PIN unused
LED_BASE_ADR 2009C000

Symbol: LED_BASE_ADR
   Definitions
      At line 194 in file ReactionTimer.s
   Uses
      At line 11 in file ReactionTimer.s
Comment: LED_BASE_ADR used once
PINSEL3 4002C00C

Symbol: PINSEL3
   Definitions
      At line 195 in file ReactionTimer.s
   Uses
      None
Comment: PINSEL3 unused
PINSEL4 4002C010

Symbol: PINSEL4
   Definitions
      At line 196 in file ReactionTimer.s
   Uses
      None
Comment: PINSEL4 unused
4 symbols
354 symbols in table
